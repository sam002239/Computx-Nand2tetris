// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Not(in=instruction[0], out=ca);
    // And(a=instruction[16], b=, out=);
    Not(in=instruction[15], out=mux1c);
    Mux16(a=aluout, b=instruction, sel=mux1c, out=out1);
    //d1=aregcontrol
    //note here mux1c is ibar
    Or(a=instruction[5], b=mux1c, out=aregload);
    ARegister(in=out1, load=aregload, out=Aregout,out[0..14]=addressM);
    // And
    //mux2input decided by a given its a c
    And(a=instruction[12], b=instruction[15], out=mux2c);
    
    Mux16(a=Aregout, b=inM, sel=mux2c, out=Ainpu2);
    //c1 is zx
    //c2 is nx
    // c3 is zy
    // c4 is ny
    //c5 is add
    // c6 is no
    And(a=instruction[11], b=instruction[15], out=c1);
    And(a=instruction[10], b=instruction[15], out=c2);
    And(a=instruction[9], b=instruction[15], out=c3);
    And(a=instruction[8], b=instruction[15], out=c4);
    And(a=instruction[7], b=instruction[15], out=c5);
    And(a=instruction[6], b=instruction[15], out=c6);
    ALU(x=dregout, y=Ainpu2, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,out=outM, out=aluout, zr=co1, ng=co2);
    And(a=instruction[3], b=instruction[15], out=writeM);//d3=writeM
    And(a=instruction[4], b=instruction[15], out=d2);
//d2reg=dregcontrol
    DRegister(in=aluout, load=d2, out=dregout);
    Or(a=co2, b=co1, out=t1);
    Not(in=t1, out=t2);
    And(a=t2, b=instruction[15], out=t3);
    And(a=t3, b=instruction[0], out=j3f);
    And(a=co1, b=instruction[1], out=t4);
    And(a=t4, b=instruction[15], out=j2f);
    And(a=co2, b=instruction[15], out=t5);
    And(a=t5, b=instruction[2], out=j1f);
    
    Or(a=j3f, b=j1f, out=tempprary);
    Or(a=tempprary, b=j2f, out=loadpcc);
    
PC(in=Aregout, load=loadpcc, inc=true, reset=reset, out[0..14]=pc);



    





}